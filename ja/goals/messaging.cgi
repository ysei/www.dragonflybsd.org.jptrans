#!/usr/local/www/cgi-bin/tablecg
#
# $DragonFly: site/data/goals/messaging.cgi,v 1.6 2004/04/16 13:23:37 justin Exp $
# $Id: messaging.cgi,v 1.2 2004/08/24 13:59:41 wids Exp $

$TITLE(DragonFly - The Port/Messaging Model)

<h1>ポート / メッセージモデル</h1>
<p>
DragonFly は LWKT に同調する軽量なポート / メッセージ API を備える予定です。
ポート / メッセージ API の概念は非常に単純です。
まずメッセージを組み立て、目標となるポートへ送り、あとで自分の応答ポートに返事が来るのを待つというものです。
この単純な概念にもとづいて、高度な機能を構築し、洗練化を行います。
このメッセージングシステムの機能を理解するには、まずメッセージがどのように送信されるのかを理解する必要があります。
基本的には以下のように動作します:
</p>
<pre>
	fubar()
	{
	    FuMsg msg;
	    initFuMsg(&amp;msg, replyPort, ...);
	    error = targetPort->mp_SendMsg(&amp;msg);
	    if (error == EASYNC) {
		  /* now or at some later time, or wait on reply port */
		  error = waitMsg(&amp;msg);	
	    }
	}
</pre>
<p>
メッセージ API はこの基本的は構造を同期 / 非同期メッセージ関数に内包します。 
lwkt_domsg() はメッセージを同期的に送り、返答を待ちます。この関数は目標ポートにヒントを与えるためのフラグをセットします。
それはメッセージが同期的にブロックされることを示すもので、目標ポートが EASYNC を返した場合 lwkt_domsg() はブロックします。 
lwkt_sendmsg() はメッセージを非同期的に送りますが、目標ポートが同期的なエラーコード(つまり EASYNC 以外全て)を返した場合、 lwkt_sendmsg() はもう完了したメッセージを返答ポート自身のキューに手動で入れます。
</p>
<p>
推測できると思いますが、目標ポートの mp_SendMsg() 関数はメッセージをどう扱うかを完全に制御します。
メッセージフラグによって渡されたヒントがどのようなものであっても、目標ポートはメッセージに対して(呼び元から見て)同期的にふるまって応答することも、メッセージをキューに入れて EASYNC を返すこともできます。
一般的にメッセージ処理は発信者から見て「ブロック」すべきではありません。
つまり、メッセージを同期的に処理することがブロックにつながるのであれば目標ポートは同期的に処理してはいけないということです。
そのかわりに、自身のスレッドのキュー(目標ポートの構造体に、便利なように埋め込んであるメッセージキュー)に入れて、 EASYNC を返すようにします。
</p>
<p>
目標ポートは幾つかの理由によりメッセージに対し同期的に振舞うかもしれません。
実際に目標ポートのための mp_sendMsg() 関数は、より高価なキューイングやスイッチングを用いることなしに要求を処理するために、 CPU ごとのキャッシュや try_mplock() のような安易なロッキング を利用することで、まさにそう振舞います。
</p>
<p>
ここで覚えておくべき重要なことは、もっともよい最適化とは mp_SendMsg() による直接の実行で、単純なサブルーチン呼出しの他には実質的にオーバヘッドを伴わないことです。
キュー処理もせず、応答ポートをいじることもなく、ということです。
もしメッセージを同期的に扱ってよいのであれば、これは非常にコストの低い処理ということになります。
この特徴があるからこそ、性能の問題を気にせずにメッセージングインタフェースを意図して使うことができるのです。
私達はたとえば Mach で用いているような種類の洗練手法を使うことはあえてしません。
少なくとも低レベルなメッセージインタフェイスでは、メモリマップやポインタの追跡といったことをしません。
ユーザ &lt;-&gt; カーネル間のメッセージインタフェイスは単純に mp_SendMsg() の関数ベクタを用い、それによって適切な変換をします。
そうすることで、送信側と受信側に関しては、メッセージがそれらの VM コンテキストに対し局所性を持つことになります。
</p>
