#!/usr/local/www/cgi-bin/tablecg
#
# $DragonFly: site/data/main/index.cgi,v 1.10 2004/07/12 19:53:16 hmp Exp $
# $Id: index.cgi,v 1.4 2004/08/30 14:28:54 wids Exp $

$TITLE(The DragonFly BSD Project)
<table border="0" width="100%" bgcolor="white">
<tr><td align="center">
    <h1>DragonFly-1.0 RELEASED!</h1>
    <h1>12 July 2004</h1>
</td></tr></table>

    <p>
FreeBSD-4.x ツリーの分岐としてプロジェクトがはじまって 1 年、 1.0 リリースのアナウンスができることを <a href="http://www.dragonflybsd.org/main/team.cgi">DragonFly Team</a> は嬉しく思っています!
</p>

    <p>
1 年目には目覚しい進展がありました。
私達はコアスレッディング、プロセス、割り込み、そしてネットワーク基盤のほとんど全てを DragonFly ネイティブなサブシステムに置き換えました。
独自のマルチプロセッサフレンドリーな slab allocator 、 動的なユーザランドスケジューラから分離された軽量カーネルスレッド(LWKT)システム、カーネルが使用することを考えた<!-- ? -->粒度の細かいシステムタイマーの抽象化、完全に統合された軽量メッセージングシステム、そしてプロセッサ間通信のための IPI(Inter Processor Interrupts) メッセージングシステムを私達は手に入れました。
</p>

    <p>
私達は開発期間中ずっと 4.x で称賛されている安定性を保持し続け、それにも関わらず主なサブシステムを再構築してきました。
そして私達は、 UP (Uni-Processor) や MP (Multi-Processor) と親和性が高く、 UP システム上で UP 中心の オリジナル 4.x コードが UP システム上にあるのとほぼ同等の効率性を持つ、明らかに優れたコーディングモデルを手にしました。
</p>

    <p>
私達のモデルに合う部分を FreeBSD, NetBSD, OpenBSD から取り込むことで私達は素晴らしい進歩を実現しました。
例えば、 NEWBUS/BUS_MA 、 USB の基盤構造、 RCNG(次世代システムスタートアップ)などです。
私達は、1.0 リリースのためにまだ初期の段階ではあるものの、数ヵ月間のうちにおおいに改善でき機能拡張できるような方法でコーディングされた革新的な新システムインストーラを含む、ビルドとリリースの構造を再構築しはじめています。<!-- ここに限った話じゃないが日本語おかしすぎ。 -->
</p>

    <p>
非常に沢山のことを行ったため、全てをここに示すことはできません。
技術的な詳細は <a href="http://www.dragonflybsd.org/status/diary.cgi">Diary</a> を見て下さい。
</p>

    <p>
まだ主要な作業が残っているユーザに目に見える範囲の大きな 2 つのサブシステムとして、ユーザランドスレッディングと ports/packages サブシステムがあります。
人々は DargonFly-1.0 リリースが以前として古い 4.x の pthread モデルを使用していること、また今のところは外部のアプリケーションのサポートのために DragonFly 固有の上書きとともに FreeBSD の ports を使用していること気付くでしょう ... そしてそれを実現するための地味なハックについても。<!-- ... 以降わからん。 -->
これら 2 つの応急項目は、 4.x から受け継がれているコードから BGL(Big Giant Lock 、 MP lock としても知られています) を取り除くこと、 VFS(Virtual File System) サブシステムのスレッド化(ネットワークサブシステムは 1.0 で既にスレッド化されています)、そして非同期的なメッセージ<!-- 通信? -->システムコールの実装をはじめるための大きな再配置と同様に、来年頭の仕事になる予定です。
また、これは氷山の一角に過ぎません。
来年、私達はもっとより多くのことを実現していくつもりです!
</p>

<h1>DragonFly BSD って何ですか?</h1>
<p>
DragonFly は FreeBSD 4.x の妥当な後継であることを目指したオペレーティングシステムです。
これらの OS は UNIX の思想と API を基づいているという意味では、 Linux と同じ種類に属しています。
DragonFly は BSD を基礎としながら、FreeBSD 5.x で取り入れられた方向性から、全く新しい方向性へ成長する機会を提供している - 言ってみれば、分岐点にあたります。
</p>
<p>
機能やアルゴリズムの正しい選択は、数多くの幅広いシステム上での優れたスケーラビリティ、頑健さ、そしてデバッグの容易さを実現する可能性を生むと私達は考えています。 
SMP や NUMA だけではなく、単一ノードから大規模なクラスタまで、全てのシステムでです。
私達はごくシンプルでありながら広い範囲へ目標を設定することが将来の成長の基礎を築くことになると思っています。 
FreeBSD 5.x を含む、今存在している BSD のコア部分は、いまだに、現代的なシステムとしては"歪んでる"と言われるくらいのモデルを主な基礎としています。
真の革新は、実際にはよりよい環境の中で、ずっと少ない投資とはるかに大きな柔軟性で開発できた、例えば暗号化されたディスクやセキュリティ階層などの、機能追加のためのハックに取って代わられました。
</p>
<p>
さらに、少なくともユーザーランドとカーネル(のバージョン)が異なった環境において、適度な後方あるいは前方バージョンとの互換性を保った API ソリューションを提供することが重要であると、私達は考えています。
インターネットを経由するセキュアで匿名性を保ったクラスタリングという、最高のクラスタリング環境という状況を考えてみると、適切な特定の API 群を持つ必要性は明らかでしょう。
</p>
<p>
最終的に、私達はあらゆるエンドユーザとシステム管理者が彼等のシステムをより簡単に維持することを可能にする、完全に統合された機能的なアップグレード機構を作ろうと思っています。 
Debian Linux はひとつの方法を示していますが、それはよりよく行うことができます。
</p>
<p>
DragonFly は少なくとも、 2 年目のプロジェクトになりました。
私達のゴールに到達するには、新しいモデルに適合させるために既存の機構を再配置することを、多くの基礎部分に要求することになるでしょう。
</p>
